
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // A user can be created by anyone (for registration)
    match /users/{userId} {
      allow create; 
      
      // Users can read/update their own document.
      // Consultants can read the documents of their linked clients.
      allow read, update: if isOwner(userId) || 
                       (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        resource.data.linkedConsultantId == request.auth.uid);
      
      // Developers and Staff can read/write any user document
      allow read, update, delete: if exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                         (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Developer' ||
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Staff');

      // Nested rule for the 'transactions' subcollection
      match /transactions/{transactionId} {
        // The owner of the parent user document can read/write transactions.
        // A linked consultant can also read the transactions.
        allow read, write: if isOwner(userId) ||
                         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                          get(/databases/$(database)/documents/users/$(userId)).data.linkedConsultantId == request.auth.uid);
      }

      // Nested rule for the 'wallets' subcollection
      match /wallets/{walletId} {
        // The owner of the parent user document can read/write wallets.
        // A linked consultant can also read the wallets.
        allow read, write: if isOwner(userId) ||
                         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                          get(/databases/$(database)/documents/users/$(userId)).data.linkedConsultantId == request.auth.uid);
      }
    }

    // Invitations can be created by clients.
    // They can be read by the involved client or consultant.
    // They can be deleted (rejected/cancelled) by the involved client or consultant.
    match /invitations/{invitationId} {
        allow create: if request.auth.uid == request.resource.data.fromClientId;
        allow read, delete: if request.auth.uid == resource.data.fromClientId ||
                             request.auth.token.email == resource.data.toConsultantEmail;
        allow update: if request.auth.token.email == resource.data.toConsultantEmail; // for accepting
    }

    // App-wide settings are read-only for authenticated users, writable only by developers.
    match /app/settings {
      allow read: if request.auth != null;
      allow write: if exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Developer';
    }
  }
}
