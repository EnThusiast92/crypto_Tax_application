
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    // Check if the requesting user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Check if the user has a specific role
    function hasRole(role) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Check if user is a Developer
    function isDeveloper() {
      return hasRole('Developer');
    }
    
    // Check if user is a Staff
    function isStaff() {
      return hasRole('Staff');
    }

    // Check if a client has granted access to the requesting consultant
    function clientHasGrantedAccess(clientId) {
      let client = get(/databases/$(database)/documents/users/$(clientId)).data;
      return client.linkedConsultantId == request.auth.uid;
    }

    // Check if the requesting user is the linked consultant for a client
    function isLinkedConsultantFor(clientId) {
      return isAuth() && hasRole('TaxConsultant') && clientHasGrantedAccess(clientId);
    }
    
    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isDeveloper() || isStaff() || isLinkedConsultantFor(userId);
      allow write: if isOwner(userId) || isDeveloper();
      
      // Rules for the 'transactions' subcollection
      match /transactions/{transactionId} {
        allow read, write: if isOwner(userId) || isDeveloper() || isStaff() || isLinkedConsultantFor(userId);
      }
      
      // Rules for the 'wallets' subcollection
      match /wallets/{walletId} {
        allow read, write: if request.auth.uid == userId;
      }
    }
    
    // Rules for the 'invitations' collection
    match /invitations/{invitationId} {
      allow read: if isAuth() && (
                    resource.data.fromClientId == request.auth.uid ||
                    resource.data.toConsultantEmail == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email
                  );
      allow create: if isAuth() && request.resource.data.fromClientId == request.auth.uid;
      allow update: if isAuth() && hasRole('TaxConsultant'); // Consultant can accept
      allow delete: if isAuth() && (
                    resource.data.fromClientId == request.auth.uid ||
                    hasRole('TaxConsultant')
                  );
    }
    
    // Rules for the 'app' collection (settings)
    match /app/settings {
        allow read: if isAuth();
        allow write: if isDeveloper();
    }
  }
}
