rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ================== HELPER FUNCTIONS ==================
    function isSignedIn() {
      return request.auth.uid != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Safer hasRole function to prevent errors on incomplete user docs
    function hasRole(role) {
      let userData = getUserData(request.auth.uid);
      return isSignedIn() &&
             'role' in userData &&
             userData.role == role;
    }
    
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    // ================== GLOBAL DEVELOPER RULE ==================
    match /{path=**} {
      allow read, write: if hasRole('Developer');
    }

    // ================== USERS COLLECTION ==================
    match /users/{userId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isOwner(userId);
    }

    // ================== TRANSACTIONS SUBCOLLECTION ==================
    match /users/{userId}/transactions/{transactionId} {
      allow write: if isOwner(userId);
      allow read: if isOwner(userId) 
                  || (hasRole('TaxConsultant') && userId in getUserData(request.auth.uid).linkedClientIds);
    }
    
    // ================== WALLETS SUBCOLLECTION (CORRECTED) ==================
    match /users/{userId}/wallets/{walletId} {
        // A client can perform any action on their own wallets.
        allow read, write: if isOwner(userId);
        
        // A tax consultant can read the wallets of their linked clients.
        allow get, list: if hasRole('TaxConsultant') && userId in getUserData(request.auth.uid).linkedClientIds;
    }
    
    // ================== INVITATIONS COLLECTION ==================
    match /invitations/{invitationId} {
        allow create: if hasRole('Client');
        allow get, list: if isSignedIn() && (resource.data.toConsultantEmail == getUserData(request.auth.uid).email || resource.data.fromClientId == request.auth.uid);
        allow update: if hasRole('TaxConsultant') && resource.data.toConsultantEmail == getUserData(request.auth.uid).email;
        allow delete: if isSignedIn() && (resource.data.fromClientId == request.auth.uid || resource.data.toConsultantEmail == getUserData(request.auth.uid).email);
    }

    // ================== APP SETTINGS ==================
    match /app/{docId} {
      allow read: if isSignedIn();
      allow write: if hasRole('Developer');
    }
  }
}
