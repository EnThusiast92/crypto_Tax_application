
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Wallets: Users can only read/write their own wallets
    match /users/{userId}/wallets/{walletId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Transactions: Users can only read/write their own transactions
    match /users/{userId}/transactions/{transactionId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Invitations:
    match /invitations/{invitationId} {
        // Clients can create invites
        allow create: if request.auth != null && request.resource.data.fromClientId == request.auth.uid;
        // Clients can read their own invites
        allow read: if request.auth != null && resource.data.fromClientId == request.auth.uid;
        // Consultants can read invites sent to them
        allow read: if request.auth != null && resource.data.toConsultantEmail == request.auth.token.email;
        // Consultants can update (accept) invites
        allow update: if request.auth != null && resource.data.toConsultantEmail == request.auth.token.email;
        // Users can delete their own invites (cancel/reject)
        allow delete: if request.auth != null && (resource.data.fromClientId == request.auth.uid || resource.data.toConsultantEmail == request.auth.token.email);
    }
    
    // App settings: Only accessible by developers
    match /app/settings {
      allow read: if request.auth != null; // Allow all authenticated users to read settings
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Developer';
    }
  }
}
