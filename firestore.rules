
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read their own profile, but anyone can create a user document (for signup).
    // Updates are restricted to the user themselves. Special roles (Developer) can update any user.
    match /users/{userId} {
      allow read;
      allow create;
      allow update: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Developer';
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Developer';

      // Users can only read/write their own transactions.
      match /transactions/{transactionId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Wallets can only be read/written by the user they belong to.
    match /wallets/{walletId} {
      allow read, create, update, delete: if request.auth.uid == request.resource.data.userId;
    }

    // Invitations can be read by the client who sent it or the consultant it was sent to.
    // They can be created by clients, and updated/deleted by either party.
    match /invitations/{invitationId} {
        allow read: if request.auth.uid == resource.data.fromClientId || request.auth.token.email == resource.data.toConsultantEmail;
        allow create: if request.auth.uid == request.resource.data.fromClientId;
        allow update, delete: if request.auth.uid == resource.data.fromClientId || request.auth.token.email == resource.data.toConsultantEmail;
    }
    
    // Application-wide settings can only be read by authenticated users, and only written by Developers.
    match /app/{documentId} {
        allow read: if request.auth != null;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Developer';
    }
  }
}
