rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Users can read and update their own profile data.
      // Creation and deletion are handled by server-side logic (e.g., auth triggers).
      allow read, update: if isOwner(userId);
      
      // Allow a user to list their own subcollections.
      // This is the key rule that fixes the "could not fetch wallets" error.
      allow list: if isOwner(userId);

      // --- Nested Subcollection Rules ---

      // A user can read/write any document within their own 'transactions' subcollection.
      match /transactions/{transactionId} {
        allow read, write: if isOwner(userId);
      }

      // A user can read/write any document within their own 'wallets' subcollection.
      match /wallets/{walletId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Rules for the 'invitations' collection
    match /invitations/{invitationId} {
        // A client can read/create/delete their own outgoing invitations.
        allow read, create, delete: if request.auth.uid == request.resource.data.fromClientId;
        // A consultant can read/update invitations sent to them.
        allow read, update, delete: if request.auth.token.email == resource.data.toConsultantEmail;
    }
    
    // Rules for the 'app' settings collection
    match /app/{settingId} {
        // Allow read for any authenticated user
        allow read: if request.auth != null;
        // Only allow writes for users with the 'Developer' role.
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Developer';
    }
  }
}
